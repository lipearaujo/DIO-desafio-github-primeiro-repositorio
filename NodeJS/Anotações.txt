Node.js
- O NodeJs √© um ambiente de execu√ß√£o do JavaScript em server-side. Ele nos d√° a possibilidade de rodar localmente o JavaScript fora do navegador por exemplo.

- Temos a possibilidade de rodar o JavaScript sem precisar de um navegador, diminuindo o processamento e trabalhando com interpreta√ß√£o just-in-time

- O nodejs, diferente de outros interpretadores, trabalha com single-thread, ou seja, imagina que cada requisi√ß√£o √© um pedido de delivery... vai chegar uma hora que o quadro de pedidos vai estar cheio e se tiver um pedido que ainda n√£o foi produzido e entregue, ele vai bloquear a passagem dos outros pedidos, gerando insatisfa√ß√£o dos clientes. Coitado do entregador.
O nodejs trabalha com requisi√ß√µes ass√≠ncronas, ou seja, n√£o precisa esperar todos os pedidos, vai entregando o que for ficando pronto. Assim todo mundo sai feliz.üòä Assim, o processamento √© n√£o-bloqueante(non-blocking), pois funciona mesmo sem uma requisi√ß√£o estar pronta, do contr√°rio seria bloqueante(blocking) e tudo ficaria parado.
Consequentemente, o entregador n√£o precisa mais ficar preocupado e entrega o pedido assim que o mesmo for finalizado, depois volta no quadro de pedidos, pega os que faltaram e entrega logo ap√≥s. Chamamos isso de Event-Loop.

- O Node trabalha com single-thred
	single-thred: cria uma pilha com as fun√ß√µes chamadas e executa uma por vez, mesmo que elas sejam concorrentes
	multi-thred: executa as fun√ß√µes paralelamente, independentes se estas s√£o concorrentes

- As requisi√ß√µes no Node s√£o ass√≠ncronas

- Blocking: s√≠ncrono, pois a entrega depende que todas as requisi√ß√µes estejam prontas 
- Non-blocking: ass√≠ncrono, pois a entrega √© feita mesmo sem todas as requisi√ß√µes estarem prontas (trabalha com o Event-loop)
- Event-loop: execu√ß√£o das requisi√ß√µes de forma ass√≠ncrona

NPM
- Ferramenta de gerenciamento de pacotes do Node

Criando packaje.json
- npm init

Dependencias:
	- Instalando nodemon: 
	yarn add nodemon
	editar "scripts" em packaje.json e adicionar "start": "nodemon index.js" (caso o index n√£o esteja na pasta raiz, passar o caminho do diret√≥rio)

	- Instalando express:
	yarn add express
	editar em packaje.json e adicionar "type": "module"

Configurando typescript:
	- Instalando typescript como dependecia de desenvolvimento
	yarn add -D typescript

	Compilar o arquivo ts: yarn tsc nomeDoArquivo.ts
	ap√≥s compilar o arquivo ts, gerar√° um arquivo com o mesmo nome porem com a extensao js. Esse arquivo que rodaremos com: node nomeDoArquivo.js
	
	Ferramenta para facilitar a compila√ß√£o: yarn add -D ts-node-dev
	editar "scripts" em packaje.json e adicionar "dev": "ts-node-dev src/index.ts"

	Instalar as tipagens do express para usar com typescript
	yarn add -D @types/express 

Instalando e configurando jest:
	yarn add -D jest
	yarn add -D @types/jest
	yarn add -D ts-jest

	inicializando o jest na aplica√ß√£o: npx jest --init

	ir ate o arquivo jest.config.ts e descomentar as linhas de testMatch
	ir ate o arquivo jest.config.ts, descomentar as linhas de preset e modificar: preset: 'ts-jest'

Extens√µes vsCode:
	Thunder client
	Jest runner


Para a build do nosso projeto:
	editar "scripts" em packaje.json e adicionar "build": "rm -rf ./build && tsc"
	editar "scripts" em packaje.json e modificar "start": "node build/index.js"
	editar "type" em packaje.json e modificar "type": "commonjs"
	editar e descomentar em tsconfig.json "outdir": "./build"
	adicionar em tsconfig.json as pastas que queremos ou n√£o enviar para o projeto final
		"include":[] - pastas dentro das chaves ser√£o enviadas
		"exclude":[] - pastas dentro das chaves n√£o ser√£o enviadas

	Ao final executar yarn build e yarn start